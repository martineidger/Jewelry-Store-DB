CREATE DATABASE JewelryStore;

--PROGRAMMER

CREATE ROLE PROGRAMMER;
GRANT CREATE ON SCHEMA PUBLIC TO PROGRAMMER; 
GRANT CONNECT ON DATABASE JewelryStore TO PROGRAMMER; 
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA PUBLIC TO PROGRAMMER;
GRANT TRIGGER ON ALL TABLES IN SCHEMA PUBLIC TO PROGRAMMER
GRANT CREATE ON SCHEMA PUBLIC TO PROGRAMMER;

CREATE USER PROGRAMMER1 WITH PASSWORD 'PASSWORD';
GRANT PROGRAMMER TO PROGRAMMER1;

--ADMIN

CREATE ROLE ADMIN;
GRANT CONNECT ON DATABASE JEWELRYSTORE TO ADMIN; 
GRANT EXECUTE ON PROCEDURE INSERT_JEWELRY(
    VARCHAR(255),
    VARCHAR(30),
    FLOAT,
    VARCHAR(80),
    INTEGER,
    TEXT,
    NUMERIC(10,2),
    NUMERIC(10,5),
    INTEGER,
    INT,
    VARCHAR(50),
    INTEGER
) TO ADMIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE JEWELRIES TO ADMIN;
REVOKE SELECT, INSERT, UPDATE, DELETE ON TABLE JEWELRIES FROM ADMIN;
GRANT USAGE, SELECT ON SEQUENCE jewelries_id_jewelry_seq TO ADMIN;
REVOKE USAGE, SELECT ON SEQUENCE jewelries_id_jewelry_seq FROM ADMIN;

CREATE USER ADMIN1 WITH PASSWORD 'PASSWORDADMIN';
GRANT ADMIN TO ADMIN1;

--CUSTOMER

CREATE ROLE CUSTOMER;
CREATE USER CUSTOMER1 WITH PASSWORD 'PASSWORDCUSTOMER';
GRANT CONNECT ON DATABASE JEWELRYSTORE TO CUSTOMER;
GRANT CUSTOMER TO CUSTOMER1;
GRANT SELECT ON TABLE JEWELRIES TO MANAGER;
REVOKE SELECT ON TABLE JEWELRIES FROM MANAGER;
GRANT EXECUTE ON PROCEDURE GetJewelryInfoByVendorCode(VARCHAR) TO CUSTOMER;
GRANT EXECUTE ON PROCEDURE GetJewelryInfoByName(VARCHAR) TO CUSTOMER;
GRANT EXECUTE ON PROCEDURE GetJewelryInfoByCategory(VARCHAR) TO CUSTOMER;
GRANT EXECUTE ON PROCEDURE GetJewelryInfoByMetal(VARCHAR) TO CUSTOMER;
GRANT EXECUTE ON PROCEDURE GetJewelryCostByName(VARCHAR) TO CUSTOMER;
GRANT EXECUTE ON PROCEDURE GetJewelryCostByVendorCode(VARCHAR) TO CUSTOMER;
GRANT EXECUTE ON PROCEDURE GetJewelryCountByName(VARCHAR) TO CUSTOMER;
GRANT EXECUTE ON PROCEDURE GetJewelryCountByVendorCode(VARCHAR) TO CUSTOMER;

--SALESMAN

CREATE ROLE SALESMAN;
CREATE USER SALESMAN1 WITH PASSWORD 'PASSWORDSALESMAN';
GRANT CONNECT ON DATABASE JEWELRYSTORE TO SALESMAN; 
GRANT SALESMAN TO SALESMAN1;
GRANT EXECUTE ON PROCEDURE CALCULATE_FINAL_COST(INTEGER) TO SALESMAN;
GRANT SELECT ON TABLE JEWELRIES TO SALESMAN;
REVOKE SELECT ON TABLE JEWELRIES FROM SALESMAN;
GRANT SELECT ON TABLE DISCOUNTS TO SALESMAN;
REVOKE SELECT ON TABLE DISCOUNTS FROM SALESMAN;
GRANT EXECUTE ON PROCEDURE UpdateJewelryAmount(INTEGER,INTEGER) TO SALESMAN;
GRANT UPDATE ON TABLE JEWELRIES TO SALESMAN;
REVOKE UPDATE ON TABLE JEWELRIES FROM SALESMAN;

--MANAGER

CREATE ROLE MANAGER;
CREATE USER MANAGER1 WITH PASSWORD 'PASSWORDMANAGER';
GRANT CONNECT ON DATABASE JEWELRYSTORE TO MANAGER; 
GRANT MANAGER TO MANAGER1;
GRANT EXECUTE ON PROCEDURE UpdateDeliveryDateTime( INT, DATE, INT) TO MANAGER;
GRANT SELECT,UPDATE,INSERT ON TABLE DELIVERS TO MANAGER;
REVOKE SELECT,UPDATE,INSERT ON TABLE DELIVERS FROM MANAGER;
GRANT EXECUTE ON PROCEDURE GetJewelryInfo(INTEGER) TO MANAGER;
GRANT SELECT,DELETE ON TABLE JEWELRIES TO MANAGER;
REVOKE SELECT,DELETE ON TABLE JEWELRIES FROM MANAGER;

CALL ExportSuppliersToXML('C:/Users/polinalazareva/SUPPLIERS.xml');

CALL ImportSuppliersFromXML('C:/Users/polinalazareva/SUPPLIERS.xml');

--тестирование
-- Создание копии таблицы JEWELRIES
CREATE TABLE JEWELRIES_TEST (
ID_JEWELRY SERIAL PRIMARY KEY,
  NAME VARCHAR(255) NOT NULL,
  VENDOR_CODE VARCHAR(30) NOT NULL,
  WEIGHT FLOAT NOT NULL,
  METALL VARCHAR(80) NOT NULL,
  STONE INTEGER NOT NULL,
  DISCRIPTION TEXT,
  COST NUMERIC(10,2) NOT NULL,
  AMOUNT INTEGER NOT NULL,
  ID_SUP INT,
  ID_CATEGORY INTEGER,
  DISCOUNTS INTEGER,
  FOREIGN KEY (ID_SUP) REFERENCES SUPPLIERS_TEST (ID_SUP));
DROP TABLE JEWELRIES_TEST

-- Создание копии таблицы SUPPLIERS

CREATE TABLE SUPPLIERS_TEST (
  ID_SUP SERIAL PRIMARY KEY,
  NAME VARCHAR(255) NOT NULL,
  CONTACT_PERSON VARCHAR(255),
  PHONE_SUP VARCHAR(20),
  EMAIL VARCHAR(255));
DROP TABLE SUPPLIERS_TEST

-- Генерация данных для таблицы JEWELRIES_COPY

DO $$
DECLARE
    i INTEGER := 1;
    metals VARCHAR[] := ARRAY['Gold', 'Silver', 'Platinum', 'Titanium', 'Rose Gold'];
    supplier_count INTEGER;
    supplier_id INTEGER;
BEGIN
    -- Получаем количество записей в таблице SUPPLIERS_TEST
    SELECT COUNT(*) INTO supplier_count FROM SUPPLIERS_TEST;
    
    WHILE i <= 100000 LOOP
        -- Случайный выбор существующего ID_SUP из таблицы SUPPLIERS_TEST
        SELECT ID_SUP INTO supplier_id FROM SUPPLIERS_TEST OFFSET floor(random() * supplier_count) LIMIT 1;
        
        INSERT INTO JEWELRIES_TEST (NAME, VENDOR_CODE, WEIGHT, METALL, STONE, DISCRIPTION, COST, AMOUNT, ID_SUP, ID_CATEGORY, DISCOUNTS)
        VALUES (
            'Jewelry ' || i,                         -- NAME
            'VC' || i,                               -- VENDOR_CODE
            RANDOM() * 100,                          -- WEIGHT (генерация случайного числа от 0 до 100)
            metals[i % 5 + 1],                       -- METALL (периодическое повторение строковых значений)
            (i % 10 + 1),                            -- STONE (периодическое повторение значений от 1 до 10)
            'Description ' || i,                     -- DISCRIPTION
            ROUND((RANDOM() * 1000)::NUMERIC, 2),    -- COST (генерация случайной цены от 0 до 1000)
            (i % 100 + 1),                           -- AMOUNT (периодическое повторение значений от 1 до 100)
            supplier_id,                             -- ID_SUP (случайный выбор из доступных ID_SUP)
            (i % 20 + 1),                            -- ID_CATEGORY (периодическое повторение значений от 1 до 20)
            (i % 3 + 1)                              -- DISCOUNTS (периодическое повторение значений от 1 до 3)
        );
        i := i + 1;
    END LOOP;
END $$;

-- Генерация данных для таблицы SUPPLIERS_COPY

INSERT INTO SUPPLIERS_TEST (NAME, CONTACT_PERSON, PHONE_SUP, EMAIL)
VALUES
    ('Supplier 1', 'Contact Person 1', '1234567890', 'supplier1@example.com'),
    ('Supplier 2', 'Contact Person 2', '0987654321', 'supplier2@example.com'),
    ('Supplier 3', 'Contact Person 3', '5555555555', 'supplier3@example.com'),
    ('Supplier 4', 'Contact Person 4', '9876543210', 'supplier4@example.com'),
    ('Supplier 5', 'Contact Person 5', '1231231234', 'supplier5@example.com'),
    ('Supplier 6', 'Contact Person 6', '9998887776', 'supplier6@example.com'),
    ('Supplier 7', 'Contact Person 7', '1112223334', 'supplier7@example.com'),
    ('Supplier 8', 'Contact Person 8', '7777777777', 'supplier8@example.com'),
    ('Supplier 9', 'Contact Person 9', '4444444444', 'supplier9@example.com'),
    ('Supplier 10', 'Contact Person 10', '6666666666', 'supplier10@example.com');


SELECT * FROM JEWELRIES_TEST;
SELECT * FROM SUPPLIERS_TEST;

------индекс 
CREATE INDEX INDEX_SUP ON JEWELRIES_TEST (ID_SUP);
drop index INDEX_SUP

----без индекса
EXPLAIN ANALYZE SELECT * FROM JEWELRIES_TEST WHERE ID_SUP=3;
----с индексом
EXPLAIN ANALYZE SELECT * FROM JEWELRIES_TEST WHERE ID_SUP=3;
---c индексoм с order by
EXPLAIN ANALYZE SELECT * FROM JEWELRIES_TEST ORDER BY ID_SUP;
---без индекса
EXPLAIN ANALYZE SELECT * FROM JEWELRIES_TEST ORDER BY COST;
---JOIN БЕЗ ИНДЕКСА
-- Создание таблицы DEVELOPERS_TEST

EXPLAIN ANALYZE SELECT JEWELRIES_TEST.ID_SUP, JEWELRIES_TEST.NAME, JEWELRIES_TEST.COST, JEWELRIES_TEST.AMOUNT, SUPPLIERS_TEST.NAME
FROM JEWELRIES_TEST
INNER JOIN SUPPLIERS_TEST ON SUPPLIERS_TEST.ID_SUP = SUPPLIERS_TEST.ID_SUP;

---JOIN С ИНДЕКСОМ

EXPLAIN ANALYZE SELECT JEWELRIES_TEST.ID_SUP, JEWELRIES_TEST.NAME, JEWELRIES_TEST.COST, JEWELRIES_TEST.AMOUNT, SUPPLIERS_TEST.NAME
FROM JEWELRIES_TEST
INNER JOIN SUPPLIERS_TEST ON SUPPLIERS_TEST.ID_SUP = SUPPLIERS_TEST.ID_SUP;