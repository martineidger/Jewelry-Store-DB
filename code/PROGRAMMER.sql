--TABLES
CREATE TABLE JEWELRIES (
  ID_JEWELRY SERIAL PRIMARY KEY,
  NAME VARCHAR(255) NOT NULL,
  VENDOR_CODE VARCHAR(30) NOT NULL,
  WEIGHT FLOAT NOT NULL,
  METALL VARCHAR(80) NOT NULL,
  DESCRIPTION TEXT,
  COST NUMERIC(10,2) NOT NULL,
  STORE_AMOUNT INTEGER NOT NULL,
  STOCK_AMOUNT INTEGER NOT NULL,
  ID_SUP INT,
  ID_CATEGORY INTEGER,
  DISCOUNTS INTEGER,
  FOREIGN KEY (DISCOUNTS) REFERENCES DISCOUNTS (ID_DISCOUNT),
  FOREIGN KEY (ID_CATEGORY) REFERENCES CATEGORIES (ID_CATEGORY),
  FOREIGN KEY (ID_SUP) REFERENCES SUPPLIERS (ID_SUP)
);
CREATE TABLE SUPPLIERS(
  ID_SUP SERIAL PRIMARY KEY,
  NAME VARCHAR(255) NOT NULL,
  CONTACT_PERSON VARCHAR(255),
  PHONE_SUP VARCHAR(20),
  EMAIL VARCHAR(255)
);
CREATE TABLE DELIVERS(
  ID_DEV SERIAL PRIMARY KEY,
  ID_SUP SERIAL,
  DELIVERY_DATE DATE NOT NULL,
  DELIVARY_TIME INTEGER NOT NULL, 
  FOREIGN KEY (ID_SUP) REFERENCES SUPPLIERS (ID_SUP)
);
CREATE TABLE CUSTOMERS(
  ID_CUS SERIAL PRIMARY KEY,
  FIRST_NAME VARCHAR(255) NOT NULL,
  SECOND_NAME VARCHAR(255),
  ADDRESS VARCHAR(255),
  PHONE_CUS VARCHAR(20)
);
CREATE TABLE SALES (
    ID_SALES SERIAL PRIMARY KEY,
    ID_JEWELRY INTEGER NOT NULL,
    ID_CUS INTEGER NOT NULL,
    ID_SUP INTEGER NOT NULL,
    AMOUNT INTEGER,
    DATE_SALES DATE,
    FINAL_COST NUMERIC(10,2),
    FOREIGN KEY (ID_JEWELRY) REFERENCES JEWELRIES(ID_JEWELRY),
    FOREIGN KEY (ID_CUS) REFERENCES CUSTOMERS(ID_CUS),
    FOREIGN KEY (ID_SUP) REFERENCES SUPPLIERS(ID_SUP)
);
CREATE TABLE REVIEWS(
  ID_REVIEW SERIAL PRIMARY KEY,
  ID_JEWELRY  INTEGER NOT NULL,
  ID_CUS  INTEGER  NOT NULL,
  RATING  INTEGER,
  COMMENT TEXT,
  FOREIGN KEY (ID_JEWELRY) REFERENCES JEWELRIES(ID_JEWELRY),
  FOREIGN KEY (ID_CUS) REFERENCES CUSTOMERS(ID_CUS)
);
CREATE TABLE CATEGORIES(
   ID_CATEGORY SERIAL PRIMARY KEY,
   NAME VARCHAR(255),
   AMOUNT  INTEGER  NOT NULL
);
CREATE TABLE DISCOUNTS(
  ID_DISCOUNT SERIAL PRIMARY KEY,
  DISCOUNT INTEGER
);
------
CREATE TABLE STOCK_REQUESTS (
    ID_REQUEST SERIAL PRIMARY KEY,
    ID_JEWELRY INTEGER NOT NULL,
    REQUEST_DATE DATE NOT NULL,
    REQUESTED_AMOUNT INTEGER NOT NULL,
    STATUS VARCHAR(50) DEFAULT 'Pending',
    FOREIGN KEY (ID_JEWELRY) REFERENCES JEWELRIES(ID_JEWELRY)
);


--CUSTOMER
CREATE OR REPLACE PROCEDURE GetJewelryInfoByVendorCode(
    p_vendor_code VARCHAR,
    OUT result_cursor REFCURSOR
) 
SECURITY DEFINER
AS $$
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM JEWELRIES WHERE VENDOR_CODE = p_vendor_code;
END;
$$ LANGUAGE plpgsql;
--
CREATE OR REPLACE PROCEDURE GetJewelryInfoByName(
    p_name VARCHAR,
    OUT result_cursor REFCURSOR
) 
SECURITY DEFINER
AS $$
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM JEWELRIES WHERE NAME = p_name;
END;
$$ LANGUAGE plpgsql;
--
CREATE OR REPLACE PROCEDURE GetJewelryInfoByCategory(
    p_category_name VARCHAR,
    OUT result_cursor REFCURSOR
) 
SECURITY DEFINER
AS $$
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM JEWELRIES WHERE CATEGORY_NAME = p_category_name;
END;
$$ LANGUAGE plpgsql;
--
CREATE OR REPLACE PROCEDURE GetJewelryInfoByMetal(
    p_metal VARCHAR,
    OUT result_cursor REFCURSOR
) 
SECURITY DEFINER
AS $$
BEGIN
    OPEN result_cursor FOR
    SELECT * FROM JEWELRIES WHERE METALL = p_metal;
END;
$$ LANGUAGE plpgsql;
--
CREATE OR REPLACE PROCEDURE GetJewelryCostByName(
    IN product_name VARCHAR,
    OUT product_cost NUMERIC(10, 2)
) 
SECURITY DEFINER
AS $$
BEGIN
    SELECT COST INTO product_cost FROM JEWELRIES WHERE NAME = product_name;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        product_cost := NULL; -- Если товар не найден, устанавливаем значение NULL
END;
$$ LANGUAGE plpgsql;
--
CREATE OR REPLACE PROCEDURE GetJewelryCostByVendorCode(
    IN vendor_code VARCHAR,
    OUT product_cost NUMERIC(10, 2)
)
SECURITY DEFINER
AS $$
BEGIN
    SELECT COST INTO product_cost FROM JEWELRIES WHERE VENDOR_CODE = vendor_code;
    IF NOT FOUND THEN
        product_cost := NULL; -- Если товар не найден, устанавливаем значение NULL
    END IF;
END;
$$ LANGUAGE plpgsql;
--
CREATE OR REPLACE PROCEDURE GetJewelryCountByName(
    IN product_name VARCHAR,
    OUT product_count INTEGER
)
SECURITY DEFINER
AS $$
BEGIN
    SELECT COUNT(*) INTO product_count FROM JEWELRIES WHERE NAME = product_name;
END;
$$ LANGUAGE plpgsql;
--
CREATE OR REPLACE PROCEDURE GetJewelryCountByVendorCode(
    IN VENDORCODE VARCHAR,
    OUT product_count INTEGER
)
SECURITY DEFINER
AS $$
BEGIN
    SELECT COUNT(*) INTO product_count FROM JEWELRIES WHERE VENDOR_CODE = VENDORCODE;
END;
$$ LANGUAGE plpgsql;



--SALESMAN
CREATE OR REPLACE PROCEDURE CALCULATE_FINAL_COST(JEWELRY_ID INT, OUT RESULT_COST NUMERIC) 
SECURITY DEFINER
AS $$
DECLARE
    jewelry_cost NUMERIC;
    discount_value INTEGER;
BEGIN
    SELECT COST INTO jewelry_cost FROM JEWELRIES WHERE ID_JEWELRY = JEWELRY_ID;
    SELECT DISCOUNT INTO discount_value FROM DISCOUNTS WHERE ID_DISCOUNT = (SELECT DISCOUNTS FROM JEWELRIES WHERE ID_JEWELRY = JEWELRY_ID);
    RESULT_COST := jewelry_cost - (jewelry_cost * discount_value / 100);
END;
$$ LANGUAGE plpgsql;
--
CREATE OR REPLACE PROCEDURE UpdateJewelryAmount(jewelry_id INT, new_amount INT)
SECURITY DEFINER
AS $$
BEGIN
    UPDATE JEWELRIES
    SET AMOUNT = new_amount
    WHERE ID_JEWELRY = jewelry_id;
END;
$$ LANGUAGE plpgsql;


